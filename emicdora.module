<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

define('EMICDORA_EDITION_COLLECTION', 'islandora:editions');
define('EMICDORA_SOURCE_COLLECTION', 'islandora:co-op');
define('EMICDORA_CREATE_EDITION', 'emic create edition');
define('EMICDORA_READ_EDITION', 'emic read edition');
define('EMICDORA_MODIFY_EDITION', 'emic modify edition');
define('EMICDORA_DELETE_EDITION', 'emic delete edition');

/**
 * Implements hook_menu().
 */
function emicdora_menu() {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $source_content_models = emicdora_source_content_models();
  $add_source_contextual_links = array();
  foreach ($source_content_models as $content_model => $label) {
    $url = "emicdora/contextual-links/source/%islandora_object/add/{$content_model}";
    $title = "Add New {$label}";
    $add_source_contextual_links[$url] = array(
      'title' => $title,
      'file' => 'includes/add_source.form.inc',
      'page callback' => 'emicdora_add_source_form',
      'page arguments' => array($content_model, 3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    );
  }
  return $add_source_contextual_links + array(
    'admin/islandora/emicdora' => array(
      'title' => 'EMiC (Editing Modernism in Canada)',
      'description' => 'Configure Editing Modernism in Canada.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_admin_settings_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    // Sources filtered by critical edition.
    'islandora/object/%islandora_object/sources' => array(
      'title' => 'Sources',
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_sources',
      'page arguments' => array(2),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    // Versions filtered by critical edition.
    'islandora/object/%islandora_object/versions' => array(
      'title' => 'Sources',
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_versions',
      'page arguments' => array(2),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    // Versions filtered by critical edition and source.
    'islandora/object/%islandora_object/%islandora_object/versions' => array(
      'title' => 'Sources',
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_versions',
      'page arguments' => array(2),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    'islandora/object/%islandora_object/manage/apparatus' => array(
      'title' => 'Apparatus',
      'file' => 'includes/apparatus.form.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_apparatus_form', 2),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_ADD_DS, 2),
    ),
    // Contextual Links for Blocks.
    'emicdora/contextual-links/apparatus/%islandora_object' => array(
      'title' => 'Apparatus',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/apparatus/%islandora_object/edit' => array(
      'title' => 'Edit Apparatus',
      'file' => 'includes/apparatus.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_apparatus_form', 3),
      'access callback' => 'islandora_object_manage_access_callback',
      'access arguments' => array(
        array(
          ISLANDORA_ADD_DS,
        ), 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/source/%islandora_object' => array(
      'title' => 'Sources',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/source/%islandora_object/link' => array(
      'title' => 'Add Existing',
      'file' => 'includes/link_source.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_source_form', 3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_METADATA_EDIT, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object' => array(
      'title' => 'Versions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object/add' => array(
      'title' => 'Add New',
      'file' => 'includes/add_version.form.inc',
      'page callback' => 'emicdora_add_version_form',
      // @todo How are we gonna get around passing several arguments
      // via contextual links?
      'page arguments' => array(3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object/link' => array(
      'title' => 'Add Existing',
      'file' => 'includes/link_version.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_version_form', 3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_METADATA_EDIT, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object' => array(
      'title' => 'Transcriptions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object/add' => array(
      'title' => 'Add New Transcription',
      'file' => 'includes/add_transcription.form.inc',
      'page callback' => 'emicdora_add_transcription_form',
      'page arguments' => array(3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_METADATA_EDIT, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'workbench' => array(
      'title' => 'My Workbench',
      'page callback' => 'emicdora_workbench',
      'file' => 'includes/workbench.inc',
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array(ISLANDORA_INGEST),
    ),
    'workbench/add/%' => array(
      'title' => 'Add New Object',
      'page callback' => 'emicdora_workbench_ingest_form',
      'page arguments' => array(2),
      'file' => 'includes/workbench.inc',
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array(ISLANDORA_INGEST),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function emicdora_menu_alter(array &$items) {
  // Prevent Islandora from overriding our breadcrumbs.
  $items['islandora/object/%islandora_object']['title callback'] = 'emicdora_drupal_title';
}

/**
 * Implements hook_permission().
 */
function emicdora_permission() {
  return array(
    EMICDORA_CREATE_EDITION => array(
      'title' => t('Create Emic Editions'),
      'description' => t('Create EMiC Critical Editions'),
    ),
    EMICDORA_READ_EDITION => array(
      'title' => t('Read Emic Editions'),
      'description' => t('Read EMiC Critical Editions'),
    ),
    EMICDORA_MODIFY_EDITION => array(
      'title' => t('Modify Emic Editions'),
      'description' => t('Modify EMiC Critical Editions'),
    ),
    EMICDORA_DELETE_EDITION => array(
      'title' => t('Delete Emic Editions'),
      'description' => t('Delete EMiC Critical Editions'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function emicdora_theme() {
  return array(
      // @todo Theme functions, etc.
  );
}

/**
 * Implements hook_block_info().
 */
function emicdora_block_info() {
  return array(
    'critical_apparatus' => array(
      'info' => t('Critical Apparatus'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -40,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'source_material' => array(
      'info' => t('Source Material'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -30,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'collations' => array(
      'info' => t('Collations'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -20,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'versions' => array(
      'info' => t('Versions'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -40,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'operations' => array(
      'info' => t('Operations'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -30,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'tei' => array(
      'info' => t('TEI'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -20,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'transcriptions' => array(
      'info' => t('Transcriptions'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -10,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function emicdora_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'critical_apparatus':
      break;

    case 'source_material':
      break;

    case 'versions':
      break;

    case 'transcriptions':
      $form['emicdora_transcription_block_count'] = array(
        '#type' => 'select',
        '#title' => t('Number of Transcriptions to display'),
        '#default_value' => variable_get('emicdora_transcription_block_count', 10),
        '#options' => drupal_map_assoc(array(5, 10, 15, 20, 25, 30)),
      );
      break;

  }
  return $form;
}

/**
 * Implements hook_block_view().
 */
function emicdora_block_view($delta = '') {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  // Check to see if we are on a critical edition object.
  $critical_edition = menu_get_object('islandora_object', 2);
  $is_critical_edition = is_object($critical_edition) && emicdora_is_critical_edition($critical_edition);
  if (!$is_critical_edition) {
    return array();
  }
  // Build the block uses paths relative to our current path.
  $path = current_path();

  $block = array();
  switch ($delta) {
    case 'critical_apparatus':
      module_load_include('inc', 'emicdora', 'includes/apparatus');
      $links = array();
      foreach ($critical_edition as $dsid => $datastream) {
        if (emicdora_is_apparatus_supported_datastream($dsid)) {
          $links[] = array(
            'title' => $datastream->label,
            'href' => $path,
            'fragment' => strtolower($dsid),
          );
        }
      }
      if (!empty($links)) {
        $block['subject'] = t('Apparatus');
        $block['content'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#contextual_links' => array(
            'emicdora' => array(
              'emicdora/contextual-links/apparatus',
              array($critical_edition->id),
            ),
          ),
        );
      }
      break;

    case 'source_material':
      // @todo Make this list not hard-coded.
      $links = array();
      $links[] = array(
        'title' => 'All',
        'href' => "islandora/object/{$critical_edition->id}/sources",
      );
      $links[] = array(
        'title' => 'Books',
        'href' => "islandora/object/{$critical_edition->id}/sources",
      );
      $links[] = array(
        'title' => 'Audio',
        'href' => "islandora/object/{$critical_edition->id}/sources",
      );
      $block['subject'] = t('Source Material');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#contextual_links' => array(
          'emicdora' => array(
            'emicdora/contextual-links/source',
            array($critical_edition->id),
          ),
        ),
      );
      break;

    case 'versions':
      // @todo Make this list not hard-coded.
      $links = array();
      $links[] = array(
        'title' => 'All',
        'href' => "islandora/object/{$critical_edition->id}/versions",
      );
      $links[] = array(
        'title' => 'Books',
        'href' => "islandora/object/{$critical_edition->id}/versions",
      );
      $links[] = array(
        'title' => 'Audio',
        'href' => "islandora/object/{$critical_edition->id}/versions",
      );
      $block['subject'] = t('Versions');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#contextual_links' => array(
          'emicdora' => array(
            'emicdora/contextual-links/version',
            array($critical_edition->id),
          ),
        ),
      );
      break;

    case 'operations':
      $block['subject'] = t('Operations');
      break;

    case 'tei':
      $links = array();

      $links[] = array(
        'title' => 'Reading Transcription',
        'href' => $path,
      );
      $links[] = array(
        'title' => 'Diplomatic Transcription',
        'href' => $path,
      );
      if (module_exists('tei_editor')) {
        $links[] = array(
          'title' => 'Edit',
          'href' => $path . '/tei_editor/edit',
        );
      }
      $links[] = array(
        'title' => 'Consolidate',
        'href' => $path,
      );
      $links[] = array(
        'title' => 'Upload',
        'href' => $path,
      );
      $links[] = array(
        'title' => 'Download',
        'href' => $path,
      );
      $block['subject'] = t('TEI');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
      );
      $block['content']["text_body"] = array(
        '#type' => 'textfield',
        '#title' => t('Enter your text here in WYSIWYG format'),
        '#description' => t('Enter your text here in WYSIWYG format'),
        '#default_value' => variable_get('text_variable', ""),
      );
      break;

    case 'transcriptions':
      // @todo Remove hard coded links.
      // @todo Handle configured display number.
      $links = array();
      $links[] = array(
        'title' => 'Transcription #1',
        'href' => $path,
      );
      $block['subject'] = t('Transcriptions');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#contextual_links' => array(
          'emicdora' => array(
            'emicdora/contextual-links/transcription',
            array($critical_edition->id),
          ),
        ),
      );
      break;

  }
  return $block;
}

/**
 * Title callback for drupal title.
 *
 * Changes the drupal title to be the objects label.
 * models that their modules want to provide a view for.
 *
 * @param AbstractObject $object
 *   The object to view.
 *
 * @return string
 *   The objects label.
 */
function emicdora_drupal_title(AbstractObject $object) {
  // We override what islandora does here so that we can set our own
  // breadcrumbs.
  return filter_xss($object->label);
}

/**
 * Implements hook_islandora_required_objects().
 */
function emicdora_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $module_path = drupal_get_path('module', 'emicdora');
  // Critical Edition Content Model.
  $critical_edition_container_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:criticalEditionContainerCModel',
    'label' => 'Critical Edition Container Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/critical_edition_ds_composite_model.xml",
      ),
    ),
  ));
  // Version Content Model.
  $version_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:versionCModel',
    'label' => 'Version Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/version_ds_composite_model.xml",
      ),
    ),
  ));
  // TEI-RDF Content Model.
  $tei_rdf_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:tei-rdfCModel',
    'label' => 'TEI-RDF Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/tei_rdf_ds_composite_model.xml",
      ),
    ),
  ));
  // Transcription Content Model.
  $transcription_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:transcriptionCModel',
    'label' => 'Transcription Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/transcription_ds_composite_model.xml",
      ),
    ),
  ));
  // Editions - Critical Edition Collection.
  $editions = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_EDITION_COLLECTION,
    'label' => 'Editions',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        'file' => "$module_path/data/objects/editions_collection_policy.xml",
      ),
    ),
  ));
  $editions->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // CO-OP - Source Object Collection.
  $coop = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_SOURCE_COLLECTION,
    'label' => 'CO-OP',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        'file' => "$module_path/data/objects/co_op_collection_policy.xml",
      ),
    ),
  ));
  $coop->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Schema Collection.
  $schema_collection = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:tei_schema_collection',
    'label' => 'Schema Collection',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        'file' => "$module_path/data/objects/islandora_critical_edition_schema_collection_policy.xml",
      ),
    ),
  ));
  $schema_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Sample Schema.
  $sample_schema = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:tei_sample_schema',
    'label' => 'CWRC_EMiC_TEI_Schema',
    'model' => 'islandora:criticaleditionschemaCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/schema-icon.png",
        'mimetype' => 'image/png',
      ),
      'RDF-SCHEMA' => array(
        'file' => "$module_path/modules/tei_editor/schemas/CWRC_EMiC_TEI.rng",
        'mimetype' => 'application/rdf+xml',
      ),
      'RDF-CSS' => array(
        'file' => "$module_path/modules/tei_editor/schemas/tei.css",
        'mimetype' => 'text/css',
      ),
    ),
  ));
  $sample_schema->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:tei_schema_collection');

  return array(
    'emicdora' => array(
      'title' => 'EMiC (Editing Modernism in Canada)',
      'objects' => array(
        $critical_edition_container_content_model,
        $version_content_model,
        $tei_rdf_content_model,
        $transcription_content_model,
        $editions,
        $coop,
        $schema_collection,
        $sample_schema,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function emicdora_islandora_xml_form_builder_form_associations() {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $source_content_models = emicdora_source_content_models();
  $source_form_associations = array();
  foreach (array_keys($source_content_models) as $content_model) {
    $source_form_associations[] = array(
      'content_model' => $content_model,
      'form_name' => 'EMiC Source MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    );
  }
  return $source_form_associations + array(
    'critical_edition_form_mods' => array(
      'content_model' => 'islandora:criticalEditionCModel',
      'form_name' => 'EMiC Critical Edition MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
    'version_form_mods' => array(
      'content_model' => 'islandora:versionCModel',
      'form_name' => 'EMiC Version MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function emicdora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'emicdora');
  $form_path = "$module_path/data/forms";
  return array(
    'EMiC Critical Edition MODS form' => array('form_file' => "$form_path/critical_edition_form_mods.xml"),
    'EMiC Version MODS form' => array('form_file' => "$form_path/version_form_mods.xml"),
    'EMiC Source MODS form' => array('form_file' => "$form_path/source_form_mods.xml"),
  );
}

/**
 * Implements hook_CMODEL_islandora_view_object().
 */
function emicdora_islandora_criticalEditionContainerCModel_islandora_view_object(AbstractObject $object) {
  module_load_include('inc', 'emicdora', 'includes/apparatus');
  module_load_include('inc', 'emicdora', 'includes/breadcrumb');
  emicdora_set_critical_edition_breadcrumbs($object);
  $datastreams = emicdora_get_apparatus_datastreams($object);
  $content = array(
    'apparatus' => array(
      '#type' => 'vertical_tabs',
    ),
  );
  foreach ($datastreams as $dsid => $datastream) {
    $content['apparatus'][$dsid] = array(
      '#title' => $datastream->label,
      '#type' => 'fieldset',
      '#id' => strtolower($dsid),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      'markup' => array(
        '#markup' => filter_xss($datastream->content),
      ),
    );
  }
  return $content;
}

/**
 * Display the sources related to this critical edition.
 *
 * @param AbstractObject $object
 *   The critical edition the sources belong to.
 *
 * @return string
 *   HTML displaying the SOLR search results containing the related sources.
 */
function emicdora_critical_edition_sources(AbstractObject $object) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  module_load_include('inc', 'emicdora', 'includes/breadcrumb');
  // Only show members of the given critical edition.
  $filters[] = format_string('!membership:("info:fedora/!pid")', array(
    '!pid' => $object->id,
    '!membership' => variable_get('emicdora_critical_edition_membership_solr_field', 'RELS_EXT_isMemberOf_uri_ms')));
  // Only show source objects.
  $source_content_models = emicdora_source_content_models();
  $sources = array();
  foreach (array_keys($source_content_models) as $content_model) {
    $sources[] = format_string('"info:fedora/!pid"', array('!pid' => $content_model));
  }
  $filters[] = format_string('!model:(!sources)', array(
    '!sources' => implode(' OR ', $sources),
    '!model' => variable_get('islandora_solr_content_model_field', 'RELS_EXT_hasModel_uri_ms')));
  $_GET['f'] = array(implode(' AND ', $filters));
  $output = islandora_solr('*:*');
  emicdora_set_source_breadcrumbs($object);
  return $output;
}

/**
 * Display the versions related to this critical edition.
 *
 * @param AbstractObject $object
 *   The critical edition the sources belong to.
 *
 * @return string
 *   HTML displaying the SOLR search results containing the related versions.
 */
function emicdora_critical_edition_versions(AbstractObject $object) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  module_load_include('inc', 'emicdora', 'includes/breadcrumb');
  // Only show members of the given critical edition.
  $filters[] = format_string('!membership:("info:fedora/!pid")', array(
    '!pid' => $object->id,
    '!membership' => variable_get('emicdora_critical_edition_membership_solr_field', 'RELS_EXT_isMemberOf_uri_ms')));
  $filters[] = format_string('!model:("info:fedora/islandora:versionCModel")', array(
    '!model' => variable_get('islandora_solr_content_model_field', 'RELS_EXT_hasModel_uri_ms')));
  $_GET['f'] = array(implode(' AND ', $filters));
  $output = islandora_solr('*:*');
  emicdora_set_source_breadcrumbs($object);
  return $output;
}
