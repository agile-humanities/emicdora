<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

define('EMICDORA_EDITION_COLLECTION', 'islandora:editions');
define('EMICDORA_FEATURED_EDITIONS_COLLECTION', 'islandora:featured_collections');
define('EMICDORA_SOURCE_COLLECTION', 'islandora:co-op');
define('EMICDORA_CREATE_EDITION', 'emic create edition');
define('EMICDORA_READ_EDITION', 'emic read edition');
define('EMICDORA_MODIFY_EDITION', 'emic modify edition');
define('EMICDORA_DELETE_EDITION', 'emic delete edition');
define('EMICDORA_MANAGE_EDITION', 'emic manage edition');
define('EMICDORA_ISDERIVATIONOF', 'isDerivationOf');

/**
 * Implements hook_menu().
 */
function emicdora_menu() {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $source_content_models = emicdora_source_content_models();
  $add_source_contextual_links = array();
  foreach ($source_content_models as $content_model => $label) {
    $url = "emicdora/contextual-links/source/%islandora_object/add/{$content_model}";
    $title = "Add New {$label}";
    $add_source_contextual_links[$url] = array(
      'title' => $title,
      'file' => 'includes/add_source.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'islandora_emicdora_add_source_form',
        $content_model,
        3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    );
  }
  return $add_source_contextual_links + array(
    'admin/islandora/emicdora' => array(
      'title' => 'EMiC (Editing Modernism in Canada)',
      'description' => 'Configure Editing Modernism in Canada.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_admin_settings_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    // Sources filtered by critical edition.
    'islandora/object/%islandora_object/sources' => array(
      'title' => 'Sources',
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_sources',
      'page arguments' => array(2),
      'file' => 'includes/source_view.inc',
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    // Versions filtered by critical edition.
    'islandora/object/%islandora_object/versions' => array(
      'title' => 'Versions',
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_versions',
      'page arguments' => array(2),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    'islandora/object/%islandora_object/transcription/%islandora_object' => array(
      'title' => 'Transcriptions',
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_transcription_view',
      'file' => 'includes/transcription_view.inc',
      'page arguments' => array(4),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    ),
    'islandora/object/%islandora_object/source/%islandora_object' => array(
      'title callback' => 'emicdora_drupal_title',
      'title arguments' => array(2),
      'page callback' => 'islandora_view_object',
      'page arguments' => array(2, 4),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    ),
    'islandora/object/%islandora_object/version/%islandora_object' => array(
      'title callback' => 'emicdora_drupal_title',
      'title arguments' => array(2),
      'page callback' => 'islandora_view_object',
      'page arguments' => array(2, 4),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    ),
    'islandora/object/%islandora_object/manage/apparatus' => array(
      'title' => 'Apparatus',
      'file' => 'includes/apparatus.form.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_apparatus_form', 2),
      'access callback' => 'emicdora_object_management_access',
      'access arguments' => array(2, 'manage_apparatus'),
    ),
    // Contextual Links for Blocks.
    'emicdora/contextual-links/apparatus/%islandora_object' => array(
      'title' => 'Apparatus',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/apparatus/%islandora_object/edit' => array(
      'title' => 'Edit Apparatus',
      'file' => 'includes/apparatus.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_apparatus_form', 3),
      'access callback' => 'islandora_object_manage_access_callback',
      'access arguments' => array(
        array(
          ISLANDORA_ADD_DS,
        ), 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/source/%islandora_object' => array(
      'title' => 'Sources',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/source/%islandora_object/link' => array(
      'title' => 'Add Existing',
      'file' => 'includes/link_source.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_source_form', 3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_METADATA_EDIT, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object' => array(
      'title' => 'Versions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object/add' => array(
      'title' => 'Add New',
      'file' => 'includes/add_version.form.inc',
      'page callback' => 'emicdora_add_version_form',
      // @todo How are we gonna get around passing several arguments
      // via contextual links?
      'page arguments' => array(3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object/link' => array(
      'title' => 'Add Existing',
      'file' => 'includes/link_version.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_version_form', 3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_METADATA_EDIT, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object' => array(
      'title' => 'Transcriptions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object/add' => array(
      'title' => 'Add New Transcription',
      'file' => 'includes/add_transcription.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_emicdora_add_transcription_form', 3),
      'access callback' => 'emicdora_object_management_access',
      'access arguments' => array(3, 'create_transcription'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object/edit' => array(
      'title' => 'Edit Transcription',
      'file' => 'includes/edit_transcription.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_edit_transcription_form', 3),
      'access callback' => 'emicdora_object_management_access',
      'access arguments' => array(3, 'edit_transcription'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object' => array(
      'title' => 'versions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/version/%islandora_object/create' => array(
      'title' => 'Add new version',
      'page callback' => 'emicdora_ingest_versionable_object_page',
      'page arguments' => array(3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/ingest_versionable_object.form.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/link' => array(
      'title' => 'Link existing version',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_version_form', 3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/link_version.form.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/configure' => array(
      'title' => 'Configure Links',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_configure_version_links', 3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/configure_links.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/source/%islandora_object/configure' => array(
      'title' => 'Configure Links',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_configure_version_links', 3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/configure_links.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'workbench' => array(
      'title' => 'My Workbench',
      'page callback' => 'emicdora_workbench',
      'file' => 'includes/workbench.inc',
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array(ISLANDORA_INGEST),
    ),
    'workbench/add/%' => array(
      'title' => 'Add New Object',
      'page callback' => 'emicdora_workbench_ingest_form',
      'page arguments' => array(2),
      'file' => 'includes/workbench.inc',
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array(ISLANDORA_INGEST),
    ),
    'islandora/object/%islandora_object/manage/edition_container' => array(
      'title' => 'Critical Edition',
      'page callback' => 'emicdora_management_menu',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'emicdora_object_management_access',
      'access arguments' => array(2, 'manage_container'),
      'file' => 'includes/container_management.inc',
      'weight' => 20,
    ),
    'islandora/object/%islandora_object/manage/edition_container/ingest' => array(
      'title' => 'Add New Version',
      'page callback' => 'emicdora_ingest_versionable_object_page',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file' => 'includes/ingest_versionable_object.form.inc',
    ),
    'islandora/emicdora_source/autocomplete/%/%' => array(
      'page callback' => 'emicdora_versionable_object_form_source_autocomplete',
      'page arguments' => array(3, 4),
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
      'file' => 'includes/ingest_versionable_object.form.inc',
      'type' => MENU_CALLBACK,
    ),
    'emicdora/editions' => array(
      'title' => 'Show all Editions',
      'page callback' => 'emicdora_show_all_editions',
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
      'file' => 'includes/utilities.inc',
    ),
    'emicdora/json/list' => array(
      'title' => 'Reconfigure inputs',
      'page callback' => 'emicdora_fix_calliope_inputs',
      'file' => 'includes/emicdora_endpoints.inc',
      'type' => MENU_CALLBACK,
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
    ),
    'coop' => array(
      'title' => 'COOP',
      'page callback' => 'theme',
      'page arguments' => array('emicdora_coop'),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
    ),
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function emicdora_file_mimetype_mapping_alter(&$mapping) {
  // Fix the mime type mapping for rng (Schema datastreams), EMiC Specific.
  $new_mappings['rng'] = "application/xml";
  foreach ($new_mappings as $extension => $mime_type) {
    if (!in_array($mime_type, $mapping['mimetypes'])) {
      // If the mime type does not already exist, add it.
      $mapping['mimetypes'][] = $mime_type;
    }
    // Get the index of the mime type and assign the extension to that key.
    $index = array_search($mime_type, $mapping['mimetypes']);
    $mapping['extensions'][$extension] = $index;
  }
}

/**
 * Implements hook_menu_alter().
 */
function emicdora_menu_alter(array &$items) {
  // Prevent Islandora from overriding our breadcrumbs.
  $items['islandora/object/%islandora_object']['title callback'] = 'emicdora_drupal_title';
}

/**
 * Implements hook_template_preprocess_region().
 */
function emictheme_preprocess_region(&$variables, $hook) {
  if ($variables['region'] == "sidebar_second") {
    // Keeping the styles unified.
    $variables['classes_array'][] = 'region-sidebar-first';
  }
}

/**
 * Alter the pluploader to not show the upload limit as per Dean's request.
 */
function emicdora_element_info_alter(array &$type) {
  if (isset($type['plupload']['#pre_render'])) {
    $type['plupload']['#pre_render'][] = 'emicdora_plupload_element_pre_render';
  }
}

/**
 * Alter the pluploader to not show the upload limit as per Dean's request.
 */
function emicdora_plupload_element_pre_render($element) {
  if (isset($element['#description'])) {
    $validators = $element['#upload_validators'];
    unset($validators['file_validate_size']);
    $element['#description'] = theme('file_upload_help', array('upload_validators' => $validators));
  }
  return $element;
}

/**
 * Implements hook_permission().
 */
function emicdora_permission() {

  return array(
    EMICDORA_CREATE_EDITION => array(
      'title' => t('Create Emic Editions'),
      'description' => t('Create EMiC Critical Editions'),
    ),
    EMICDORA_READ_EDITION => array(
      'title' => t('Read Emic Editions'),
      'description' => t('Read EMiC Critical Editions'),
    ),
    EMICDORA_MODIFY_EDITION => array(
      'title' => t('Modify Emic Editions'),
      'description' => t('Modify EMiC Critical Editions'),
    ),
    EMICDORA_DELETE_EDITION => array(
      'title' => t('Delete Emic Editions'),
      'description' => t('Delete EMiC Critical Editions'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function emicdora_theme() {
  $path = drupal_get_path('module', 'emicdora');
  return array(
    // Theme admin form fields.
    'emicdora_fields' => array(
      'path' => $path,
      'file' => 'includes/configure_links.inc',
      'render element' => 'form',
    ),
    'emicdora_transcription_object' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/emicdora_transcription_object',
      'pattern' => 'emicdora_transcription_object__',
      'variables' => array('islandora_object' => NULL),
    ),
    'emicdora_coop' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/emicdora_coop',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function emicdora_islandora_transcriptioncmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('emicdora_transcription_object', array('islandora_object' => $object));
  return array('' => $output);
}

/**
 * Implements hook_block_info().
 */
function emicdora_block_info() {
  return array(
    'critical_apparatus' => array(
      'info' => t('Critical Apparatus'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -40,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'source_material' => array(
      'info' => t('Source Material'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -30,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'versions' => array(
      'info' => t('Versions'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -40,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'operations' => array(
      'info' => t('Operations'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -30,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'tei' => array(
      'info' => t('TEI'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -20,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'transcriptions' => array(
      'info' => t('Transcriptions'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -10,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function emicdora_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'critical_apparatus':
      break;

    case 'source_material':
      break;

    case 'versions':
      break;

    case 'transcriptions':
      $form['emicdora_transcription_block_count'] = array(
        '#type' => 'select',
        '#title' => t('Number of Transcriptions to display'),
        '#default_value' => variable_get('emicdora_transcription_block_count', 10),
        '#options' => drupal_map_assoc(array(5, 10, 15, 20, 25, 30)),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_view().
 */
function emicdora_block_view($delta = '') {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $object = menu_get_object('islandora_object', 2);
  $path_parts = explode('/', $_GET['q']);
  $is_source = (isset($path_parts[3]) && $path_parts[3] == 'source') ? TRUE : FALSE;
  $is_sources_page = (isset($path_parts[3]) && $path_parts[3] == 'sources') ? TRUE : FALSE;
  $is_compare = (isset($path_parts[3]) && $path_parts[3] == 'compare') ? TRUE : FALSE;
  $is_table = (isset($path_parts[3]) && $path_parts[3] == 'table') ? TRUE : FALSE;
  $is_transcript = (isset($path_parts[3]) && $path_parts[3] == 'transcription') ? TRUE : FALSE;
  $is_tei_editor = (isset($path_parts[3]) && $path_parts[3] == 'tei_editor') ? TRUE : FALSE;
  $is_version_search = (isset($path_parts[3]) && $path_parts[3] == 'versions') ? TRUE : FALSE;

  if ($is_transcript) {
    $transcript_pid = $path_parts[4];
  }
  $versionable_object = NULL;
  $is_versionable_object = FALSE;
  $is_critical_edition = is_object($object) && emicdora_has_content_model($object, 'islandora:criticalEditionContainerCModel');
  $nested_object = menu_get_object('islandora_object', 4);
  if ($nested_object) {
    $is_versionable_object = emicdora_has_content_model($nested_object, 'islandora:versionCModel');
    if ($is_versionable_object) {
      $versionable_object = $nested_object;
    }
  }
  if (!$is_critical_edition) {
    if (!$is_versionable_object) {
      return array();
    }
    else {
      $versionable_object = $object;
      $critical_editions = array_merge(
          $versionable_object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection'), $versionable_object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOf'));
      if (empty($critical_editions)) {
        return array();
      }
      $critical_edition = islandora_object_load($critical_editions[0]['object']['value']);
      $source_objects = $versionable_object->relationships->get(FEDORA_RELS_EXT_URI, EMICDORA_ISDERIVATIONOF);
      if (!empty($source_objects)) {

        $source_object = $source_objects[0]['object']['value'];
      }
    }
  }
  else {
    $critical_edition = $object;
  }

  // Build the block uses paths relative to our current path.
  $path = current_path();

  $block = array();

  switch ($delta) {
    case 'critical_apparatus':
      if (emicdora_show_apparatus_block()) {
        module_load_include('inc', 'emicdora', 'includes/apparatus');
        $links = array();
        foreach ($critical_edition as $dsid => $datastream) {
          if (emicdora_is_apparatus_supported_datastream($dsid)) {
            // Do some shenanigans to make fragments nice.
            $fragment = strtolower(preg_replace('/[\s,]+/', '_', $datastream->label));
            $links[] = array(
              'title' => $datastream->label,
              'href' => "islandora/object/{$critical_edition->id}",
              'fragment' => $fragment,
              'attributes' => array('class' => array('apparatus_link')),
            );
          }
        }
        $block['subject'] = t('Apparatus');
        $block['content'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#contextual_links' => array(
            'emicdora' => array(
              'emicdora/contextual-links/apparatus',
              array($critical_edition->id),
            ),
          ),
        );
      }
      break;

    case 'source_material':

      $sources = emicdora_get_raw_objects($critical_edition);
      $facets = emicdora_retrieve_user_created_facets($critical_edition->id, 'source');
      $total = array_sum(array_map('count', $sources));

      $links = array();
      $links[] = array(
        'title' => t('All') . " ($total)",
        'href' => "islandora/object/{$critical_edition->id}/sources",
      );

      foreach ($facets as $solr_field_val => $values) {
        $links[] = array(
          'title' => format_string('@display (@count)', array(
            '@display' => ucfirst($values['display_name']),
            '@count' => $values['count'],
          )),
          'href' => "islandora/object/{$critical_edition->id}/sources",
          'query' => array('solr' => $solr_field_val),
        );
      }
      $block['subject'] = t('Source Material');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#contextual_links' => array(
          'emicdora' => array(
            'emicdora/contextual-links/source',
            array($critical_edition->id),
          ),
        ),
      );
      break;

    case 'versions':
      $source_or_transcription_object = menu_get_object('islandora_object', 4);
      // First see if the object is a critical edition or a version.
      if (!array_intersect($object->models, array('islandora:criticalEditionContainerCModel', 'islandora:versionCModel'))) {
        break;
      }

      if (!$source_or_transcription_object && !$is_version_search && !in_array('islandora:versionCModel', $object->models)) {
        break;
      }

      if ($is_source) {
        $versions = emicdora_get_raw_objects($critical_edition, 'source_versions', $path_parts[4]);
      }
      else {
        $versions = emicdora_get_raw_objects($critical_edition, 'version');
      }
      $facets = emicdora_retrieve_user_created_facets($critical_edition->id, 'version');
      $links = array();

      $total = array_sum(array_map('count', $versions));
      $links[] = array(
        'title' => t('All') . " ($total)",
        'href' => "islandora/object/{$critical_edition->id}/versions",
      );
      foreach ($facets as $solr_field_val => $values) {
        $links[] = array(
          'title' => format_string('@display (@count)', array(
            '@display' => ucfirst($values['display_name']),
            '@count' => $values['count'],
          )),
          'href' => "islandora/object/{$critical_edition->id}/versions",
          'query' => array('solr' => $solr_field_val),
        );
      }
      $block['subject'] = t('Versions');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
      );
      if ($is_source || $is_versionable_object) {
        $block['content']['#contextual_links'] = array(
          'emicdora' => array(
            'emicdora/contextual-links/version',
            array($critical_edition->id),
          ),
        );
      }

      break;

    case 'operations':
      $links = array();
      if ($is_critical_edition) {
        $id = $critical_edition->id;
      }
      if ($versionable_object) {
        $id = $versionable_object->id;
      }
      if ($is_source) {
        $id = $path_parts[4];
      }
      if ($is_table) {
        $mvd = isset($path_parts[4]) ? $path_parts[4] : '';
        $links[] = array(
          'title' => 'Compare View',
          'href' => "islandora/object/$id/compare/$mvd",
          'fragment' => "$mvd/{$critical_edition->id}",
        );
      }
      if ($is_compare) {
        $mvd = isset($path_parts[4]) ? $path_parts[4] : '';
        $links[] = array(
          'title' => 'Table View',
          'href' => "islandora/object/$id/table/$mvd",
          'fragment' => "$mvd/{$critical_edition->id}",
        );
      }
      // Placeholder until we figure what the view button is for.

      $links[] = array(
        'title' => 'View',
        'href' => "islandora/object/$id",
      );

      if ($is_source) {
        $links[] = array(
          'title' => 'View Source Object',
          'href' => "islandora/object/{$path_parts[4]}",
        );
      }

      if (user_access(EMICDORA_MODIFY_EDITION)) {
        $links[] = array(
          'title' => 'Edit Metatdata',
          'href' => "islandora/edit_form/$id/MODS",
        );
      }
      if (user_access(EMICDORA_DELETE_EDITION)) {
        $links[] = array(
          'title' => 'Delete',
          'href' => "islandora/object/$id/delete",
        );
      }

      if (!empty($links)) {
        $block['subject'] = t('Operations');
        $block['content'] = array(
          array(
            '#theme' => 'links',
            '#links' => $links,
          ),
        );
      }
      break;

    case 'tei':
      $links = array();
      $links[] = array(
        'title' => 'Reading Transcription',
        'href' => $path,
      );
      $links[] = array(
        'title' => 'Diplomatic Transcription',
        'href' => $path,
      );
      if (module_exists('tei_editor') && $is_versionable_object && user_access(EMICDORA_MODIFY_EDITION)) {
        $links[] = array(
          'title' => 'Edit',
          'href' => "islandora/object/$versionable_object->id/tei_editor/edit",
        );
      }
      $links[] = array(
        'title' => 'Consolidate',
        'href' => $path,
      );
      $links[] = array(
        'title' => 'Upload',
        'href' => $path,
      );
      $links[] = array(
        'title' => 'Download',
        'href' => $path,
      );
      $block['subject'] = t('TEI');
      if ($versionable_object) {
        $block['content'] = array(
          array(
            '#theme' => 'links',
            '#links' => $links,
          ),
        );
      }
      break;

    case 'transcriptions':
      // @todo Remove hard coded links.
      // @todo Handle configured display number.
      if ((!$is_critical_edition && !$is_versionable_object) || $is_sources_page || $is_source) {
        break;
      }
      module_load_include('inc', 'emicdora', 'includes/utilities');
      $versions = emicdora_get_raw_objects($critical_edition, 'version');
      $transcription_data = array();
      foreach ($versions as $type) {
        foreach ($type as $version) {
          $versionable_objects[] = $version;
          $version_data = emicdora_get_raw_objects(islandora_object_load($version), 'transcriptions');
          $transcription_data = array_merge($transcription_data, $version_data);
        }
      }
      $links = array();
      foreach ($transcription_data as $pid => $transcriptions) {
        foreach ($transcriptions as $transcription) {
          $transcription_object = islandora_object_load($pid);
          $links[] = array(
            'title' => $transcription['label'],
            'href' => "islandora/object/{$critical_edition->id}/transcription/{$transcription['pid']}",
            'attributes' => array('title' => t("Transcription of @trans", array('@trans' => $transcription_object->label))),
          );
        }
      }

      $block['subject'] = t('Transcriptions');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
      );
      if ($is_versionable_object) {
        $block['content']['#contextual_links'] = array(
          'emicdora' => array(
            'emicdora/contextual-links/transcription',
            array($versionable_object->id),
          ),
        );
      }
      if ($is_transcript) {
        $block['content']['#contextual_links'] = array(
          'emicdora' => array(
            "emicdora/contextual-links/transcription/$transcript_pid/edit",
            array($transcript_pid),
          ),
        );
      }
      break;
  }
  return $block;
}

/**
 * Title callback for drupal title.
 *
 * Changes the drupal title to be the objects label.
 * models that their modules want to provide a view for.
 *
 * @param AbstractObject $object
 *   The object to view.
 *
 * @return string
 *   The objects label.
 */
function emicdora_drupal_title(AbstractObject $object) {
  // We override what islandora does here so that we can set our own
  // breadcrumbs.
  return filter_xss($object->label);
}

/**
 * Implements hook_islandora_required_objects().
 */
function emicdora_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $module_path = drupal_get_path('module', 'emicdora');
  // Critical Edition Content Model.
  $critical_edition_container_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:criticalEditionContainerCModel',
    'label' => 'Critical Edition Container Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/critical_edition_ds_composite_model.xml",
      ),
    ),
  ));
  // Version Content Model.
  $version_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:versionCModel',
    'label' => 'Version Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/version_ds_composite_model.xml",
      ),
    ),
  ));
  // TEI-RDF Content Model.
  $tei_rdf_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:tei-rdfCModel',
    'label' => 'TEI-RDF Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/tei_rdf_ds_composite_model.xml",
      ),
    ),
  ));
  // Transcription Content Model.
  $transcription_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:transcriptionCModel',
    'label' => 'Transcription Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/transcription_ds_composite_model.xml",
      ),
    ),
  ));
  // Editions - Critical Edition Collection.
  $editions = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_EDITION_COLLECTION,
    'label' => 'Editions',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        'file' => "$module_path/data/objects/editions_collection_policy.xml",
      ),
    ),
  ));
  $editions->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // CO-OP - Source Object Collection.
  $coop = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_SOURCE_COLLECTION,
    'label' => 'CO-OP',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        'file' => "$module_path/data/objects/co_op_collection_policy.xml",
      ),
    ),
  ));
  $coop->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Featured Editions - Featured Critical Edition Collection.
  $featured_editions = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_FEATURED_EDITIONS_COLLECTION,
    'label' => 'Featured Editions',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        // Uses the same collection policy as the islandora:editions.
        'file' => "$module_path/data/objects/editions_collection_policy.xml",
      ),
    ),
  ));
  $featured_editions->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  return array(
    'emicdora' => array(
      'title' => 'EMiC (Editing Modernism in Canada)',
      'objects' => array(
        $critical_edition_container_content_model,
        $version_content_model,
        $tei_rdf_content_model,
        $transcription_content_model,
        $editions,
        $coop,
        $featured_editions,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function emicdora_islandora_xml_form_builder_form_associations() {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $source_content_models = emicdora_source_content_models();
  $source_form_associations = array();
  foreach (array_keys($source_content_models) as $content_model) {
    $source_form_associations[] = array(
      'content_model' => $content_model,
      'form_name' => 'EMiC Source MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    );
  }
  return $source_form_associations + array(
    'critical_edition_form_mods' => array(
      'content_model' => 'islandora:criticalEditionContainerCModel',
      'form_name' => 'EMiC Critical Edition MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
    'version_form_mods' => array(
      'content_model' => 'islandora:versionCModel',
      'form_name' => 'EMiC Version MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function emicdora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'emicdora');
  $form_path = "$module_path/data/forms";
  return array(
    'EMiC Critical Edition MODS form' => array('form_file' => "$form_path/critical_edition_form_mods.xml"),
    'EMiC Version MODS form' => array('form_file' => "$form_path/version_form_mods.xml"),
    'EMiC Source MODS form' => array('form_file' => "$form_path/source_form_mods.xml"),
  );
}

/**
 * Implements hook_CMODEL_islandora_view_object().
 */
function emicdora_islandora_criticalEditionContainerCModel_islandora_view_object(AbstractObject $object) {
  module_load_include('inc', 'islandora', 'includes/metadata');
  module_load_include('inc', 'emicdora', 'includes/utilities');
  module_load_include('inc', 'emicdora', 'includes/apparatus');
  module_load_include('inc', 'emicdora', 'includes/breadcrumb');
  emicdora_set_critical_edition_breadcrumbs($object);
  $content = t("unknown content type");
  $supplied_object = menu_get_object('islandora_object', 4);
  $content_models = array_keys(emicdora_source_content_models());
  $content_models[] = 'islandora:versionCModel';
  if (!$supplied_object) {
    $content = emicdora_get_apparatus_as_content($object);
    return array('emicdora' => $content);
  }

  foreach ($content_models as $content_model) {
    if (in_array($content_model, $supplied_object->models)) {
      $model = $content_model;
    }
  }

  switch ($model) {
    case 'islandora:bookCModel':
      $content = '<div class="emicdora_source_title">' . $supplied_object->label . "</div>";
      $content .= theme('islandora_book_book', array('object' => $supplied_object));
      $content .= '<div class="emicdora_metadata_details">' . islandora_retrieve_metadata_markup($supplied_object, FALSE) . "</div>";
      break;

    case 'islandora:sp-audioCModel':
      $content = '<div class="emicdora_source_title">' . $supplied_object->label . "</div>";
      $content .= theme('islandora_audio', array('islandora_object' => $supplied_object));
      break;

    case 'islandora:sp_videoCModel':
      $content = '<div class="emicdora_source_title">' . $supplied_object->label . "</div>";
      $content .= theme('islandora_video', array('object' => $supplied_object));

      break;

    case 'islandora:sp_large_image_cmodel':
      $content = '<div class="emicdora_source_title">' . $supplied_object->label . "</div>";
      $content .= theme('islandora_large_image', array('islandora_object' => $supplied_object));
      break;

    case 'islandora:versionCModel':
      $content = '<div class="emicdora_source_title">' . $supplied_object->label . "</div>";
      $content .= theme('versionable_object_viewer', array('islandora_object' => $supplied_object));
      break;
  }
  return array('emicdora' => $content);
}

/**
 * Display the versions related to this critical edition.
 *
 * @param AbstractObject $object
 *   The critical edition the sources belong to.
 *
 * @return string
 *   HTML displaying the SOLR search results containing the related versions.
 */
function emicdora_critical_edition_versions(AbstractObject $object, $type = NULL) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  module_load_include('inc', 'emicdora', 'includes/breadcrumb');
  // Only show members of the given critical edition.
  $filters[] = format_string('!membership:("info:fedora/!pid")', array(
    '!pid' => $object->id,
    '!membership' => variable_get('emicdora_critical_edition_membership_solr_field', 'RELS_EXT_isMemberOf_uri_ms')));
  $filters[] = format_string('!model:("info:fedora/islandora:versionCModel")', array(
    '!model' => variable_get('islandora_solr_content_model_field', 'RELS_EXT_hasModel_uri_ms')));
  if (isset($_GET['solr'])) {
    $filters[] = $_GET['solr'];
  }
  $_GET['f'] = array(implode(' AND ', $filters));
  $output = islandora_solr('*:*');
  emicdora_set_source_breadcrumbs($object);
  return $output;
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 */
function emicdora_islandora_versioncmodel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $url_parts = explode('/', $_GET['q']);
  if (isset($url_parts[3]) && $url_parts[3] == 'versions') {
    $parent_pid = $url_parts[2];
    $parent_object = islandora_object_load($parent_pid);
    if ($parent_object && in_array('islandora:criticalEditionContainerCModel', $parent_object->models)) {
      $version_pid = $search_results['PID'];
      $search_results['object_url'] = "islandora/object/$parent_pid/version/$version_pid";
    }
  }
}

/**
 * Controls access to management interface.
 *
 * @param AbstractObject $object
 *   Object to be examined
 * @param string $context
 *   Determines origin of function call
 *
 * @return bool
 *   Access to path
 */
function emicdora_object_management_access($object, $context) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  if (is_null($object)) {
    return FALSE;
  }
  $content_models = $object->models;
  $access = FALSE;

  switch ($context) {

    case 'create_transcription':
      if (in_array('islandora:versionCModel', $content_models) && user_access(EMICDORA_MODIFY_EDITION)) {
        $access = TRUE;
      }
      break;

    case 'associate_versionable_object':
      if (in_array('islandora:criticalEditionContainerCModel', $content_models) && user_access(EMICDORA_MODIFY_EDITION)) {
        $access = TRUE;
      }
      break;

    case 'manage_container':
      if (in_array('islandora:criticalEditionContainerCModel', $content_models) && user_access(EMICDORA_CREATE_EDITION)) {
        $access = TRUE;
      }
      break;

    case 'manage_versionable_object':
      if (in_array('islandora:versionCModel', $content_models) && user_access(EMICDORA_MANAGE_EDITION)) {
        $access = TRUE;
      }
      break;

    case 'edit_transcription':
      if (in_array('islandora:transcriptionCModel', $content_models) && user_access(EMICDORA_MODIFY_EDITION)) {
        $access = TRUE;
      }
      break;

    case 'manage_apparatus':
      if (in_array('islandora:criticalEditionContainerCModel', $content_models) && user_access(EMICDORA_MANAGE_EDITION)) {
        $access = TRUE;
      }
      break;

    case 'display_consolidated_tei':
      if (in_array('islandora:versionCModel', $content_models) && user_access(EMICDORA_READ)) {
        $tei_rdfs = array_keys(emicdora_get_members($object->id, 'islandora:criticalEditionContainerCModel'));
        if (!empty($tei_rdfs)) {
          $access = TRUE;
        }
      }
      break;

    case 'view_critical_edition':
      if (in_array('islandora:criticalEditionContainerCModel', $content_models) && user_access(EMICDORA_READ)) {
        $access = TRUE;
      }
      break;

    case 'view_versionable_object':
      module_load_include('inc', 'islandora_emicdora', 'includes/utilities');
      $members = emicdora_get_members($object->id);
      $transcription = array_search('islandora:transcriptionCModel', $members);
      $transcription_object = islandora_object_load($transcription);
      if ($transcription_object && in_array('islandora:versionCModel', $content_models) && user_access(EMICDORA_READ)) {
        $access = TRUE;
      }
      break;

    case 'manage_apparatus':
      if (in_array('islandora:criticalApparatusCModel', $content_models) && user_access(EMICDORA_MANAGE_EDITION)) {
        $access = TRUE;
      }
      break;
  }

  return $access && islandora_object_access_callback(ISLANDORA_VIEW_OBJECTS, $object);
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function emicdora_islandora_versionCModel_islandora_ingest_steps(array $form_state) {
  return array(
    'emicdora_versionable_object' => array(
      'weight' => -10,
      'type' => 'form',
      'form_id' => 'emicdora_versionable_object_form',
      'module' => 'emicdora',
      'file' => 'includes/ingest_versionable_object.form.inc',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 */
function emicdora_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $url_parts = explode('/', $_GET['q']);
  if (isset($url_parts[3]) && $url_parts[3] == 'sources') {
    $critical_edition_pid = $url_parts[2];
    $critical_edition = islandora_object_load($critical_edition_pid);
    if ($critical_edition && in_array('islandora:criticalEditionContainerCModel', $critical_edition->models)) {
      $source_pid = $search_results['PID'];
      $search_results['object_url'] = "islandora/object/$critical_edition_pid/source/$source_pid";
    }
  }
}

/**
 * Determines whether to add version in context menu.
 *
 * @param string $permission
 *   Base fedora permission
 * @param AbstractObject $object
 *   Object represneting Critical Edition
 *
 * @return bool
 *   Access allowed
 */
function emicdora_show_version_context_menu($permission, $object) {
  $access = FALSE;
  $url = isset($_GET['destination']) ? $_GET['destination'] : $_GET['q'];
  if (islandora_object_access($permission, $object)) {
    $url_parts = explode('/', $url);
    if (isset($url_parts[3]) && $url_parts[3] == 'source') {
      $access = TRUE;
    }
    if (isset($url_parts[4]) && $url_parts[4] == 'create' && $url_parts[1] == 'contextual-links' && $url_parts[2] == 'version') {
      $access = TRUE;
    }
    if (in_array('islandora:criticalEditionContainerCModel', $object->models)) {
      $access = TRUE;
    }
  }
  return $access;
}

/**
 * Implements hook_forms().
 */
function emicdora_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id, 'islandora_solr_admin') === 0) {
    module_load_include('inc', 'islandora_solr', 'includes/admin');

    // Handle two form using the same building function, but allowing each to
    // be altered separately.
    if (in_array($form_id, array(
          'islandora_solr_admin_settings_search_fields',
          'islandora_solr_admin_settings_sort_fields',
        ))) {
      $forms[$form_id] = array(
        'callback' => 'islandora_solr_admin_settings_search_or_sort_fields',
      );
    }
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function emicdora_islandora_transcriptioncmodel_islandora_object_ingested(AbstractObject $object) {
  module_load_include('inc', 'collation', 'includes/calliope');
  emicdora_calliope_write_file($object->id);
}
