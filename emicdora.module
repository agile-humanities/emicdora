<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

define('EMICDORA_EDITION_COLLECTION', 'islandora:editions');
define('EMICDORA_FEATURED_EDITIONS_COLLECTION', 'islandora:featured_collections');
define('EMICDORA_SOURCE_COLLECTION', 'islandora:co-op');
define('EMICDORA_ISDERIVATIONOF', 'isDerivationOf');
define('EMICDORA_SEARCH_EDITIONS_PATH', 'islandora/search/RELS_EXT_hasModel_uri_mt%3A%28criticalEditionContainerCModel%29');
define('EMICDORA_SEARCH_COOP_PATH', 'islandora/search/NOT RELS_EXT_hasModel_uri_mt:(criticalEditionContainerCModel OR versionCModel)');

/**
 * Implements hook_menu().
 */
function emicdora_menu() {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $source_content_models = emicdora_source_content_models();
  $add_source_contextual_links = array();
  foreach ($source_content_models as $content_model => $label) {
    $url = "emicdora/contextual-links/source/%islandora_object/add/{$content_model}";
    $title = "Add New {$label}";
    $add_source_contextual_links[$url] = array(
      'title' => $title,
      'file' => 'includes/add_source.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'islandora_emicdora_add_source_form',
        $content_model,
        3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    );
  }
  foreach ($source_content_models as $content_model => $label) {
    $url = "emicdora/source/add/{$content_model}";
    $title = "Add New {$label}";
    $add_source_contextual_links[$url] = array(
      'title' => $title,
      'file' => 'includes/add_source.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'islandora_emicdora_add_source_form',
        $content_model,
      ),
      'access arguments' => array(ISLANDORA_INGEST),
    );
  }
  return $add_source_contextual_links + array(
    // Administer the Emicdora Module.
    'admin/islandora/emicdora' => array(
      'title' => 'EMiC (Editing Modernism in Canada)',
      'description' => 'Configure Editing Modernism in Canada.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_admin_settings_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    // Critical Edition Sources filtered by critical edition.
    'islandora/object/%islandora_object/sources' => array(
      'title callback' => 'emicdora_set_title_and_breadcrumbs_callback',
      'title arguments' => array(
        'emicdora_set_title_and_breadcrumbs_sources', 2,
      ),
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_sources',
      'page arguments' => array(2),
      'file' => 'includes/source_view.inc',
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    // Critical Edition Versions.
    'islandora/object/%islandora_object/versions' => array(
      'title callback' => 'emicdora_set_title_and_breadcrumbs_callback',
      'title arguments' => array(
        'emicdora_set_title_and_breadcrumbs_versions', 2,
      ),
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_versions',
      'page arguments' => array(2),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    // Critical Edition Versions filtered by Source.
    'islandora/object/%islandora_object/versions/%islandora_object' => array(
      'title callback' => 'emicdora_set_title_and_breadcrumbs_callback',
      'title arguments' => array(
        'emicdora_set_title_and_breadcrumbs_versions', 2, 4,
      ),
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_critical_edition_versions',
      'page arguments' => array(2, 4),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    // Critical Edition Transcription.
    'islandora/object/%islandora_object/transcription/%islandora_object' => array(
      'title callback' => 'emicdora_set_title_and_breadcrumbs_callback',
      'title arguments' => array(
        'emicdora_set_title_and_breadcrumbs_transcription', 2, 4,
      ),
      'context' => MENU_CONTEXT_PAGE,
      'page callback' => 'emicdora_transcription_view',
      'file' => 'includes/transcription_view.inc',
      'page arguments' => array(4),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    ),
    'islandora/object/%islandora_object/source/%islandora_object' => array(
      'title callback' => 'emicdora_set_title_and_breadcrumbs_callback',
      'title arguments' => array(
        'emicdora_set_title_and_breadcrumbs_source', 2, 4,
      ),
      'page callback' => 'islandora_view_object',
      'page arguments' => array(2, 4),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    ),
    'islandora/object/%islandora_object/version/%islandora_object' => array(
      'title callback' => 'emicdora_set_title_and_breadcrumbs_callback',
      'title arguments' => array(
        'emicdora_set_title_and_breadcrumbs_version', 2, 4,
      ),
      'page callback' => 'islandora_view_object',
      'page arguments' => array(2, 4),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    ),
    'islandora/object/%islandora_object/manage/apparatus' => array(
      'title' => 'Apparatus',
      'file' => 'includes/apparatus.form.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_apparatus_form', 2),
      'access callback' => 'emicdora_object_management_access',
      'access arguments' => array(2, 'manage_apparatus'),
    ),
    // Contextual Links for Blocks.
    'emicdora/contextual-links/apparatus/%islandora_object' => array(
      'title' => 'Critical Apparatus',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/apparatus/%islandora_object/edit' => array(
      'title' => 'Edit Critical Apparatus',
      'file' => 'includes/apparatus.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_apparatus_form', 3),
      'access callback' => 'islandora_object_manage_access_callback',
      'access arguments' => array(
        array(
          ISLANDORA_ADD_DS,
        ), 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/source/%islandora_object' => array(
      'title' => 'Sources',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/source/%islandora_object/link' => array(
      'title' => 'Add Existing',
      'file' => 'includes/link_source.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_source_form', 3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_METADATA_EDIT, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object' => array(
      'title' => 'Versions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object/add' => array(
      'title' => 'Add New',
      'file' => 'includes/add_version.form.inc',
      'page callback' => 'emicdora_add_version_form',
      // @todo How are we gonna get around passing several arguments
      // via contextual links?
      'page arguments' => array(3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/%islandora_object/link' => array(
      'title' => 'Add Existing',
      'file' => 'includes/link_version.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_version_form', 3),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_METADATA_EDIT, 3),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object' => array(
      'title' => 'Transcriptions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object/add' => array(
      'title' => 'Add New Transcription',
      'file' => 'includes/add_transcription.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_emicdora_add_transcription_form', 3),
      'access callback' => 'emicdora_object_management_access',
      'access arguments' => array(3, 'create_transcription'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/transcription/%islandora_object/edit' => array(
      'title' => 'Edit Transcription',
      'file' => 'includes/edit_transcription.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_edit_transcription_form', 3),
      'access callback' => 'emicdora_object_management_access',
      'access arguments' => array(3, 'edit_transcription'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object' => array(
      'title' => 'versions',
      'page callback' => TRUE,
      'access callback' => TRUE,
    ),
    'emicdora/contextual-links/version/%islandora_object/create' => array(
      'title' => 'Add new version',
      'page callback' => 'emicdora_ingest_versionable_object_page',
      'page arguments' => array(3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/ingest_versionable_object.form.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/link' => array(
      'title' => 'Link existing version',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_link_version_form', 3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/link_version.form.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/version/%islandora_object/configure' => array(
      'title' => 'Configure Links',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_configure_version_links', 3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/configure_links.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'emicdora/contextual-links/source/%islandora_object/configure' => array(
      'title' => 'Configure Links',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_configure_version_links', 3),
      'access callback' => 'emicdora_show_version_context_menu',
      'access arguments' => array(ISLANDORA_INGEST, 3),
      'file' => 'includes/configure_links.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    ),
    'workbench' => array(
      'title' => 'My Workbench',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('emicdora_workbench_form'),
      'file' => 'includes/workbench.inc',
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array(ISLANDORA_INGEST),
    ),
    'islandora/emicdora_source/autocomplete/%/%' => array(
      'page callback' => 'emicdora_versionable_object_form_source_autocomplete',
      'page arguments' => array(3, 4),
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
      'file' => 'includes/ingest_versionable_object.form.inc',
      'type' => MENU_CALLBACK,
    ),
    'emicdora/json/list' => array(
      'title' => 'Reconfigure inputs',
      'page callback' => 'emicdora_fix_calliope_inputs',
      'file' => 'includes/emicdora_endpoints.inc',
      'type' => MENU_CALLBACK,
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
    ),
    'coop' => array(
      'title' => 'COOP',
      'page callback' => 'theme',
      'page arguments' => array('emicdora_coop'),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
    ),
    'emicdora/remove/source' => array(
      'title' => 'Remove source object',
      'page callback' => 'emicdora_remove_source',
      'file' => 'includes/utilities.inc',
      'type' => MENU_CALLBACK,
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
    ),
    'emicdora/remove/version' => array(
      'title' => 'Remove version object',
      'page callback' => 'emicdora_remove_version',
      'file' => 'includes/utilities.inc',
      'type' => MENU_CALLBACK,
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function emicdora_menu_alter(array &$items) {
  // We don't want the print icon on this site.
  unset($items["islandora/object/%islandora_object/print_object"]);
  // Prevent Islandora from overriding our breadcrumbs.
  $item = &$items['islandora/object/%islandora_object'];
  $item['title callback'] = 'emicdora_set_title_and_breadcrumbs_callback';
  $item['title arguments'] = array(
    'emicdora_set_title_and_breadcrumbs_object', 2,
  );
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function emicdora_menu_breadcrumb_alter(array &$active_trail, array $item) {
  // We don't bother with breadcrumbs on any of the contextual link overlays.
  if (drupal_match_path($item['path'], 'emicdora/contextual-links/*')) {
    $active_trail = array();
  }
}

/**
 * Implements hook_admin_paths().
 */
function emicdora_admin_paths() {
  // Show contextual link pages as overlays.
  return array(
    'emicdora/contextual-links/*' => TRUE,
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function emicdora_file_mimetype_mapping_alter(&$mapping) {
  // Fix the mime type mapping for rng (Schema datastreams), EMiC Specific.
  $new_mappings['rng'] = "application/xml";
  foreach ($new_mappings as $extension => $mime_type) {
    if (!in_array($mime_type, $mapping['mimetypes'])) {
      // If the mime type does not already exist, add it.
      $mapping['mimetypes'][] = $mime_type;
    }
    // Get the index of the mime type and assign the extension to that key.
    $index = array_search($mime_type, $mapping['mimetypes']);
    $mapping['extensions'][$extension] = $index;
  }
}

/**
 * Implements hook_template_preprocess_region().
 */
function emictheme_preprocess_region(&$variables, $hook) {
  if ($variables['region'] == "sidebar_second") {
    // Keeping the styles unified.
    $variables['classes_array'][] = 'region-sidebar-first';
  }
}

/**
 * Alter the pluploader to not show the upload limit as per Dean's request.
 */
function emicdora_element_info_alter(array &$type) {
  if (isset($type['plupload']['#pre_render'])) {
    $type['plupload']['#pre_render'][] = 'emicdora_plupload_element_pre_render';
  }
}

/**
 * Alter the pluploader to not show the upload limit as per Dean's request.
 */
function emicdora_plupload_element_pre_render($element) {
  if (isset($element['#description'])) {
    $validators = $element['#upload_validators'];
    unset($validators['file_validate_size']);
    $element['#description'] = theme('file_upload_help', array('upload_validators' => $validators));
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function emicdora_theme() {
  $path = drupal_get_path('module', 'emicdora');
  return array(
    // Theme admin form fields.
    'emicdora_fields' => array(
      'path' => $path,
      'file' => 'includes/configure_links.inc',
      'render element' => 'form',
    ),
    'emicdora_transcription_object' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/emicdora_transcription_object',
      'pattern' => 'emicdora_transcription_object__',
      'variables' => array('islandora_object' => NULL),
    ),
    'emicdora_coop' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/emicdora_coop',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function emicdora_islandora_transcriptioncmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('emicdora_transcription_object', array('islandora_object' => $object));
  return array('' => $output);
}

/**
 * Implements hook_block_info().
 */
function emicdora_block_info() {
  return array(
    'critical_apparatus' => array(
      'info' => t('Critical Apparatus'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -40,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'source_material' => array(
      'info' => t('Source Material'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -30,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'versions' => array(
      'info' => t('Versions'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -40,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'operations' => array(
      'info' => t('Operations'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -30,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'tei' => array(
      'info' => t('TEI'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -20,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
    'transcriptions' => array(
      'info' => t('Transcriptions'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'weight' => -10,
      'status' => 1,
      'region' => 'sidebar_second',
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function emicdora_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'critical_apparatus':
      break;

    case 'source_material':
      break;

    case 'versions':
      break;

    case 'transcriptions':
      $form['emicdora_transcription_block_count'] = array(
        '#type' => 'select',
        '#title' => t('Number of Transcriptions to display'),
        '#default_value' => variable_get('emicdora_transcription_block_count', 10),
        '#options' => drupal_map_assoc(array(5, 10, 15, 20, 25, 30)),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_view().
 */
function emicdora_block_view($delta = '') {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $object = menu_get_object('islandora_object', 2);
  $path_parts = explode('/', $_GET['q']);
  $is_source = (isset($path_parts[3]) && $path_parts[3] == 'source') ? TRUE : FALSE;
  $is_sources_page = (isset($path_parts[3]) && $path_parts[3] == 'sources') ? TRUE : FALSE;
  $is_compare = (isset($path_parts[3]) && $path_parts[3] == 'compare') ? TRUE : FALSE;
  $is_table = (isset($path_parts[3]) && $path_parts[3] == 'table') ? TRUE : FALSE;
  $is_transcript = (isset($path_parts[3]) && $path_parts[3] == 'transcription') ? TRUE : FALSE;
  $is_tei_editor = (isset($path_parts[3]) && $path_parts[3] == 'tei_editor') ? TRUE : FALSE;
  $is_version_search = (isset($path_parts[3]) && $path_parts[3] == 'versions') ? TRUE : FALSE;

  if ($is_transcript) {
    $transcript_pid = $path_parts[4];
  }

  $versionable_object = NULL;
  $critical_edition = NULL;

  $is_versionable_object = FALSE;
  $is_critical_edition = is_object($object) && emicdora_has_content_model($object, 'islandora:criticalEditionContainerCModel');
  $nested_object = menu_get_object('islandora_object', 4);
  if ($nested_object) {
    $is_versionable_object = in_array('islandora:versionCModel', $nested_object->models);
    if ($is_versionable_object) {
      $versionable_object = $nested_object;
    }
  }
  if ($is_tei_editor) {
    $is_versionable_object = in_array('islandora:versionCModel', $object->models);
    if ($is_versionable_object) {
      $versionable_object = $object;
      $obj_rel = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOf');
      $obj_rel = reset($obj_rel);
      $critical_edition = islandora_object_load($obj_rel['object']['value']);
    }
  }
  if (!$is_critical_edition) {
    if (!$is_versionable_object) {
      return array();
    }
    else {
      $versionable_object = $object;
      $critical_editions = array_merge(
          $versionable_object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection'), $versionable_object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOf'));
      if (empty($critical_editions)) {
        return array();
      }
      $critical_edition = islandora_object_load($critical_editions[0]['object']['value']);
      $source_objects = $versionable_object->relationships->get(FEDORA_RELS_EXT_URI, EMICDORA_ISDERIVATIONOF);
      if (!empty($source_objects)) {
        $source_object = $source_objects[0]['object']['value'];
      }
    }
  }
  else {
    $critical_edition = $object;
  }
  // Build the block uses paths relative to our current path.
  $path = current_path();

  $block = array();
  switch ($delta) {
    case 'critical_apparatus':
      if (emicdora_show_apparatus_block()) {
        module_load_include('inc', 'emicdora', 'includes/apparatus');
        $links = array();
        foreach ($critical_edition as $dsid => $datastream) {
          if (emicdora_is_apparatus_supported_datastream($dsid)) {
            // Do some shenanigans to make fragments nice.
            $fragment = strtolower(preg_replace('/[\s,]+/', '_', $datastream->label));
            $links[] = array(
              'title' => $datastream->label,
              'href' => "islandora/object/{$critical_edition->id}",
              'fragment' => $fragment,
              'attributes' => array('class' => array('apparatus_link')),
            );
          }
        }
        $block['subject'] = t('Apparatus');
        $block['content'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#contextual_links' => array(
            'emicdora' => array(
              'emicdora/contextual-links/apparatus',
              array($critical_edition->id),
            ),
          ),
        );
      }
      break;

    case 'source_material':

      $sources = emicdora_get_raw_objects($critical_edition);
      $facets = emicdora_retrieve_user_created_facets($critical_edition->id, 'source');
      $total = array_sum(array_map('count', $sources));

      $links = array();
      $links[] = array(
        'title' => t('All') . " ($total)",
        'href' => "islandora/object/{$critical_edition->id}/sources",
      );

      foreach ($facets as $solr_field_val => $values) {
        $links[] = array(
          'title' => format_string('@display (@count)', array(
            '@display' => ucfirst($values['display_name']),
            '@count' => $values['count'],
          )),
          'href' => "islandora/object/{$critical_edition->id}/sources",
          'query' => array('solr' => $solr_field_val),
        );
      }
      $block['subject'] = t('Source Material');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#contextual_links' => array(
          'emicdora' => array(
            'emicdora/contextual-links/source',
            array($critical_edition->id),
          ),
        ),
      );
      break;

    case 'versions':
      $source_or_transcription_object = menu_get_object('islandora_object', 4);
      // First see if the object is a critical edition or a version.
      if (!array_intersect($object->models, array('islandora:criticalEditionContainerCModel', 'islandora:versionCModel'))) {
        break;
      }

      if (!$source_or_transcription_object && !$is_version_search && !in_array('islandora:versionCModel', $object->models)) {
        break;
      }

      if ($is_source) {
        $versions = emicdora_get_raw_objects($critical_edition, 'source_versions', $path_parts[4]);
      }
      else {
        $versions = emicdora_get_raw_objects($critical_edition, 'version');
      }
      $facets = emicdora_retrieve_user_created_facets($critical_edition->id, 'version');
      $links = array();

      $total = array_sum(array_map('count', $versions));
      $links[] = array(
        'title' => t('All') . " ($total)",
        'href' => "islandora/object/{$critical_edition->id}/versions",
      );
      foreach ($facets as $solr_field_val => $values) {
        $links[] = array(
          'title' => format_string('@display (@count)', array(
            '@display' => ucfirst($values['display_name']),
            '@count' => $values['count'],
          )),
          'href' => "islandora/object/{$critical_edition->id}/versions",
          'query' => array('solr' => $solr_field_val),
        );
      }
      $block['subject'] = t('Versions');
      $block['content'] = array(
        '#theme' => 'links',
        '#links' => $links,
      );
      if ($is_source || $is_versionable_object) {
        $block['content']['#contextual_links'] = array(
          'emicdora' => array(
            'emicdora/contextual-links/version',
            array($critical_edition->id),
          ),
        );
      }

      break;

    case 'operations':
      module_load_include('inc', 'emicdora', 'includes/operations.blocks');
      // This nested object is either a source, version or transcription.
      $nested_object = menu_get_object('islandora_object', 4);
      $links = array();
      if ($nested_object) {
        if (in_array('islandora:versionCModel', $nested_object->models)) {
          // If it's a version we need to get the source version from it.
          $source_rels = $nested_object->relationships->get(FEDORA_RELS_EXT_URI, EMICDORA_ISDERIVATIONOF);
          $source_rels = reset($source_rels);
          $source_pid = $source_rels['object']['value'];
          $links = emicdora_versionable_object_operations_block_links($nested_object->id, $critical_edition->id, $source_pid);
        }
        elseif (in_array('islandora:transcriptionCModel', $nested_object->models)) {
          // If it's a transcription we need to get the version from it.
          $version_rels = $nested_object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOf');
          $version_rels = reset($version_rels);
          $version_pid = $version_rels['object']['value'];
          $links = emicdora_transcription_object_operations_block_links($nested_object->id, $critical_edition->id, $version_pid);
        }
        // It's a source object.
        else {
          $links = emicdora_source_object_operations_block_links($nested_object->id, $critical_edition->id);
        }
      }
      if ($is_table || $is_compare) {
        $mvd = isset($path_parts[4]) ? $path_parts[4] : '';
        $current_view = $is_table ? 'table' : 'compare';
        $links = emicdora_collation_object_operations_block_links($critical_edition->id, $mvd, $current_view);
      }

      if (!empty($links)) {
        $block['subject'] = t('Operations');
        $block['content'] = array(
          array(
            '#theme' => 'links',
            '#links' => $links,
          ),
        );
      }
      break;

    case 'tei':
      if ($is_tei_editor || isset($versionable_object->id)) {
        $links = array();
        if ($is_tei_editor) {
          $links[] = array(
            'title' => 'Reading Transcription',
            'href' => $path,
          );
          $links[] = array(
            'title' => 'Diplomatic Transcription',
            'href' => $path,
          );
        }
        if (module_exists('tei_editor') && isset($versionable_object) && islandora_object_access('ISLANDORA_METADATA_EDIT', $versionable_object)) {
          $links[] = array(
            'title' => 'Edit',
            'href' => "islandora/object/{$critical_edition->id}/version/{$versionable_object->id}/edit",
          );
        }
        $links[] = array(
          'title' => 'Consolidate',
          'href' => $path,
        );
        $links[] = array(
          'title' => 'Upload',
          'href' => $path,
        );
        $links[] = array(
          'title' => 'Download',
          'href' => $path,
        );
        $block['subject'] = t('TEI');
        $block['content'] = array(
          array(
            '#theme' => 'links',
            '#links' => $links,
          ),
        );
      }
      break;

    case 'transcriptions':
      // @todo Remove hard coded links.
      // @todo Handle configured display number.
      if ((!$is_critical_edition && !$is_versionable_object) || $is_sources_page || $is_source || $is_version_search) {
        break;
      }
      // Only show the transcriptions content if viewing the version viewer or
      // the markup editor.
      if ($is_tei_editor || isset($versionable_object->id)) {
        module_load_include('inc', 'emicdora', 'includes/utilities');
        $versions = emicdora_get_raw_objects($critical_edition, 'version');
        // Only show transcriptions relevant to the version we are on.
        $transcription_data = emicdora_get_raw_objects($versionable_object, 'transcriptions');
        $links = array();
        foreach ($transcription_data as $pid => $transcriptions) {
          foreach ($transcriptions as $transcription) {
            $transcription_object = islandora_object_load($pid);
            $links[] = array(
              'title' => $transcription['label'],
              'href' => "islandora/object/{$critical_edition->id}/transcription/{$transcription['pid']}",
              'attributes' => array('title' => t("Transcription of @trans", array('@trans' => $transcription_object->label))),
            );
          }
        }
        $block['subject'] = t('Transcriptions');
        $block['content'] = array(
          '#theme' => 'links',
          '#links' => $links,
        );
        if ($is_versionable_object) {
          $block['content']['#contextual_links'] = array(
            'emicdora' => array(
              'emicdora/contextual-links/transcription',
              array($versionable_object->id),
            ),
          );
        }
        if ($is_transcript) {
          $block['content']['#contextual_links'] = array(
            'emicdora' => array(
              "emicdora/contextual-links/transcription/$transcript_pid/edit",
              array($transcript_pid),
            ),
          );
        }
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_islandora_required_objects().
 */
function emicdora_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $module_path = drupal_get_path('module', 'emicdora');
  // Critical Edition Content Model.
  $critical_edition_container_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:criticalEditionContainerCModel',
    'label' => 'Critical Edition Container Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/critical_edition_ds_composite_model.xml",
      ),
    ),
  ));
  // Version Content Model.
  $version_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:versionCModel',
    'label' => 'Version Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/version_ds_composite_model.xml",
      ),
    ),
  ));
  // TEI-RDF Content Model.
  $tei_rdf_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:tei-rdfCModel',
    'label' => 'TEI-RDF Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/tei_rdf_ds_composite_model.xml",
      ),
    ),
  ));
  // Transcription Content Model.
  $transcription_content_model = emicdora_create_required_object($connection, array(
    'pid' => 'islandora:transcriptionCModel',
    'label' => 'Transcription Content Model',
    'model' => 'fedora-system:ContentModel-3.0',
    'datastreams' => array(
      'DS-COMPOSITE-MODEL' => array(
        'file' => "$module_path/data/objects/transcription_ds_composite_model.xml",
      ),
    ),
  ));
  // Editions - Critical Edition Collection.
  $editions = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_EDITION_COLLECTION,
    'label' => 'Editions',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        'file' => "$module_path/data/objects/editions_collection_policy.xml",
      ),
    ),
  ));
  $editions->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // CO-OP - Source Object Collection.
  $coop = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_SOURCE_COLLECTION,
    'label' => 'CO-OP',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        'file' => "$module_path/data/objects/co_op_collection_policy.xml",
      ),
    ),
  ));
  $coop->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Featured Editions - Featured Critical Edition Collection.
  $featured_editions = emicdora_create_required_object($connection, array(
    'pid' => EMICDORA_FEATURED_EDITIONS_COLLECTION,
    'label' => 'Featured Editions',
    'model' => 'islandora:collectionCModel',
    'datastreams' => array(
      'TN' => array(
        'file' => "$module_path/images/folder.png",
        'mimetype' => 'image/png',
      ),
      'COLLECTION_POLICY' => array(
        // Uses the same collection policy as the islandora:editions.
        'file' => "$module_path/data/objects/editions_collection_policy.xml",
      ),
    ),
  ));
  $featured_editions->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  return array(
    'emicdora' => array(
      'title' => 'EMiC (Editing Modernism in Canada)',
      'objects' => array(
        $critical_edition_container_content_model,
        $version_content_model,
        $tei_rdf_content_model,
        $transcription_content_model,
        $editions,
        $coop,
        $featured_editions,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function emicdora_islandora_xml_form_builder_form_associations() {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $source_content_models = emicdora_source_content_models();
  $source_form_associations = array();
  foreach (array_keys($source_content_models) as $content_model) {
    $source_form_associations[] = array(
      'content_model' => $content_model,
      'form_name' => 'EMiC Source MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    );
  }
  return $source_form_associations + array(
    'critical_edition_form_mods' => array(
      'content_model' => 'islandora:criticalEditionContainerCModel',
      'form_name' => 'EMiC Critical Edition MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
    'version_form_mods' => array(
      'content_model' => 'islandora:versionCModel',
      'form_name' => 'EMiC Version MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function emicdora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'emicdora');
  $form_path = "$module_path/data/forms";
  return array(
    'EMiC Critical Edition MODS form' => array('form_file' => "$form_path/critical_edition_form_mods.xml"),
    'EMiC Version MODS form' => array('form_file' => "$form_path/version_form_mods.xml"),
    'EMiC Source MODS form' => array('form_file' => "$form_path/source_form_mods.xml"),
  );
}

/**
 * Implements hook_CMODEL_islandora_view_object().
 */
function emicdora_islandora_criticalEditionContainerCModel_islandora_view_object(AbstractObject $object) {
  module_load_include('inc', 'islandora', 'includes/metadata');
  module_load_include('inc', 'emicdora', 'includes/utilities');
  module_load_include('inc', 'emicdora', 'includes/apparatus');

  $content = "";
  $supplied_object = menu_get_object('islandora_object', 4);
  $content_models = array_keys(emicdora_source_content_models());
  $content_models[] = 'islandora:versionCModel';

  module_load_include('inc', 'emicdora', 'includes/breadcrumb');
  emicdora_set_page_title_and_subtitle($object->label, t('Critical Apparatus'));
  if (!$supplied_object) {
    $content = emicdora_get_apparatus_as_content($object);
    return array('emicdora' => $content);
  }

  foreach ($content_models as $content_model) {
    if (in_array($content_model, $supplied_object->models)) {
      $model = $content_model;
    }
  }

  switch ($model) {
    case 'islandora:bookCModel':
      $content = theme('islandora_book_book', array('object' => $supplied_object));
      $content .= '<div class="emicdora_metadata_details">' . islandora_retrieve_metadata_markup($supplied_object, FALSE) . "</div>";
      break;

    case 'islandora:sp-audioCModel':
      $content = theme('islandora_audio', array('islandora_object' => $supplied_object));
      break;

    case 'islandora:sp_videoCModel':
      $content = theme('islandora_video', array('object' => $supplied_object));
      break;

    case 'islandora:sp_large_image_cmodel':
      $content = theme('islandora_large_image', array('islandora_object' => $supplied_object));
      break;

    case 'islandora:versionCModel':
      $content = theme('versionable_object_viewer', array('islandora_object' => $supplied_object));
      break;
  }

  return array('emicdora' => $content);
}

/**
 * Display the versions related to this critical edition.
 *
 * @param AbstractObject $object
 *   The critical edition the sources belong to.
 *
 * @return string
 *   HTML displaying the SOLR search results containing the related versions.
 */
function emicdora_critical_edition_versions(AbstractObject $object, $type = NULL) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  // Only show members of the given critical edition.
  $filters[] = format_string('!membership:("info:fedora/!pid")', array(
    '!pid' => $object->id,
    '!membership' => variable_get('emicdora_critical_edition_membership_solr_field', 'RELS_EXT_isMemberOf_uri_ms')));
  $filters[] = format_string('!model:("info:fedora/islandora:versionCModel")', array(
    '!model' => variable_get('islandora_solr_content_model_field', 'RELS_EXT_hasModel_uri_ms')));
  if (isset($_GET['solr'])) {
    $filters[] = $_GET['solr'];
  }
  $_GET['f'] = array(implode(' AND ', $filters));
  $output = islandora_solr('*:*');
  return $output;
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 */
function emicdora_islandora_versioncmodel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $url_parts = explode('/', $_GET['q']);
  if (isset($url_parts[3]) && $url_parts[3] == 'versions') {
    $parent_pid = $url_parts[2];
    $parent_object = islandora_object_load($parent_pid);
    if ($parent_object && in_array('islandora:criticalEditionContainerCModel', $parent_object->models)) {
      $version_pid = $search_results['PID'];
      $search_results['object_url'] = "islandora/object/$parent_pid/version/$version_pid";
    }
  }
}

/**
 * Controls access to management interface.
 *
 * @param AbstractObject $object
 *   Object to be examined
 * @param string $context
 *   Determines origin of function call
 *
 * @return bool
 *   Access to path
 */
function emicdora_object_management_access($object, $context) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  if (is_null($object)) {
    return FALSE;
  }
  $content_models = $object->models;
  $access = FALSE;

  switch ($context) {

    case 'create_transcription':
      if (in_array('islandora:versionCModel', $content_models) && islandora_object_access(ISLANDORA_INGEST, $object) && islandora_object_access(ISLANDORA_ADD_DS, $object)) {
        $access = TRUE;
      }
      break;

    case 'manage_container':
      if (in_array('islandora:criticalEditionContainerCModel', $content_models) && islandora_object_access(ISLANDORA_INGEST, $object)) {
        $access = TRUE;
      }
      break;

    case 'edit_transcription':
      if (in_array('islandora:transcriptionCModel', $content_models) && islandora_object_access(ISLANDORA_ADD_DS, $object)) {
        $access = TRUE;
      }
      break;

    case 'manage_apparatus':
      if (in_array('islandora:criticalEditionContainerCModel', $content_models) && islandora_object_access(ISLANDORA_ADD_DS, $object) && islandora_object_access(ISLANDORA_PURGE, $object)) {
        $access = TRUE;
      }
      break;

    case 'display_consolidated_tei':
      if (in_array('islandora:versionCModel', $content_models) && islandora_object_access(ISLANDORA_ADD_DS, $object)) {
        $tei_rdfs = array_keys(emicdora_get_members($object->id, 'islandora:criticalEditionContainerCModel'));
        if (!empty($tei_rdfs)) {
          $access = TRUE;
        }
      }
      break;
  }

  return $access && islandora_object_access_callback(ISLANDORA_VIEW_OBJECTS, $object);
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function emicdora_islandora_versionCModel_islandora_ingest_steps(array $form_state) {
  return array(
    'emicdora_versionable_object' => array(
      'weight' => -10,
      'type' => 'form',
      'form_id' => 'emicdora_versionable_object_form',
      'module' => 'emicdora',
      'file' => 'includes/ingest_versionable_object.form.inc',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 */
function emicdora_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $url_parts = explode('/', $_GET['q']);
  if (isset($url_parts[3]) && $url_parts[3] == 'sources') {
    $critical_edition_pid = $url_parts[2];
    $critical_edition = islandora_object_load($critical_edition_pid);
    if ($critical_edition && in_array('islandora:criticalEditionContainerCModel', $critical_edition->models)) {
      $source_pid = $search_results['PID'];
      $search_results['object_url'] = "islandora/object/$critical_edition_pid/source/$source_pid";
    }
  }
}

/**
 * Determines whether to add version in context menu.
 *
 * @param string $permission
 *   Base fedora permission
 * @param AbstractObject $object
 *   Object representing Critical Edition
 *
 * @return bool
 *   Access allowed
 */
function emicdora_show_version_context_menu($permission, $object) {
  $access = FALSE;
  $url = isset($_GET['destination']) ? $_GET['destination'] : $_GET['q'];
  if (islandora_object_access($permission, $object)) {
    $url_parts = explode('/', $url);
    if (isset($url_parts[3]) && $url_parts[3] == 'source') {
      $access = TRUE;
    }
    if (isset($url_parts[4]) && $url_parts[4] == 'create' && $url_parts[1] == 'contextual-links' && $url_parts[2] == 'version') {
      $access = TRUE;
    }
    if (in_array('islandora:criticalEditionContainerCModel', $object->models)) {
      $access = TRUE;
    }
  }
  return $access;
}

/**
 * Implements hook_forms().
 */
function emicdora_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id, 'islandora_solr_admin') === 0) {
    module_load_include('inc', 'islandora_solr', 'includes/admin');

    // Handle two form using the same building function, but allowing each to
    // be altered separately.
    if (in_array($form_id, array(
          'islandora_solr_admin_settings_search_fields',
          'islandora_solr_admin_settings_sort_fields',
        ))) {
      $forms[$form_id] = array(
        'callback' => 'islandora_solr_admin_settings_search_or_sort_fields',
      );
    }
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function emicdora_transcriptioncmodel_TRANSCRIPTION_islandora_object_ingested(AbstractObject $object, $datastream) {
  module_load_include('inc', 'collation', 'includes/calliope');
  emicdora_calliope_write_file($object->id);
}

/**
 * Implements hook_islandora_ingest_steps_alter().
 */
function emicdora_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
  $shared_storage = &islandora_ingest_form_get_shared_storage($form_state);
  if (isset($_POST['source'])) {
    $shared_storage['source'] = filter_xss($_POST['source']);
  }
  if (isset($shared_storage['destination_url'])) {
    $form_state['redirect'] = $shared_storage['destination_url'];
  }

  if (!empty($steps['xml_form_builder_metadata_step']) && isset($shared_storage['source'])) {
    $source = islandora_object_load($shared_storage['source']);
    if (isset($source['MODS'])) {
      // Set the template to be the source objects MODS datastream if present.
      // This pre-populates the Metadata form.
      $steps['xml_form_builder_metadata_step']['args'][0]['template'] = $source['MODS']->content;
    }
  }
}

/**
 * Acts as a delegator allowing us to specify title / breadcrumbs via callback.
 *
 * This function is meant to be used in the menu_hook's 'title callback'
 * property, it allows use to have the functions for handling this logic in a
 * different file other than the module file as it's getting rather bloated.
 *
 * @param string $callback
 *   The function that will set the title and breadcrumbs.
 */
function emicdora_set_title_and_breadcrumbs_callback($callback) {
  module_load_include('inc', 'emicdora', 'includes/breadcrumb');
  $args = func_get_args();
  call_user_func_array($callback, array_slice($args, 1));
}

/**
 * Implements hook_form_islandora_delete_object_form_alter().
 */
function emicdora_form_islandora_delete_object_form_alter(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $object = $form_state['object'];
  if (in_array('islandora:criticalEditionContainerCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the critical edition. This action cannot be undone.');
    $form['#submit'] = array('emicdora_delete_critical_edition_submit');
  }
  if (in_array('islandora:bookCModel', $object->models)) {
    $owners = islandora_get_parents_from_rels_ext($object);
    $is_critical_edition = FALSE;
    foreach ($owners as $owner) {
      if (in_array('islandora:criticalEditionContainerCModel', $owner->models)) {
        $is_critical_edition = TRUE;
        $form['#submit'] = array();
        $link = l($owner->label, "islandora/object/$owner->id");
        drupal_set_message(t("@object is member of Critical Edition !pid and cannot be deleted.", array('@object' => filter_xss($object->label), '!pid' => filter_xss($link))));
        drupal_goto("islandora/object/{$object->id}");
        return;
      }
      $form['#submit'][] = 'emicdora_delete_versions_submit';
    }
  }
  if (in_array('islandora:transcriptionCModel', $object->models)) {
    $form['#submit'] = array('emicdora_delete_transcription_submit');
  }
}

/**
 * Sever delete critical edition and relationships to member objects.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function emicdora_delete_critical_edition_submit(array $form, array &$form_state) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  module_load_include('inc', 'collation', 'includes/calliope');
  module_load_include('inc', 'collation', 'includes/mvd');

  $object = $form_state['object'];
  $members = array_keys(emicdora_get_members($object->id));
  foreach ($members as $member) {
    $member_object = islandora_object_load($member);
    $member_object->relationships->remove(FEDORA_RELS_EXT_URI, 'isMemberOf', $object->id);
  }
  $mvds = emicdora_calliope_find_mvds($object);
  foreach ($mvds as $mvd_label => $params) {
    emicdora_mvd_crud($object->id, $mvd_label, 'bulk_delete');
  }
  islandora_delete_object($object);
  $form_state['redirect'] = 'coop';
}

/**
 * Sever delete transcription objects and related mongo files.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function emicdora_delete_transcription_submit(array $form, array &$form_state) {
  module_load_include('inc', 'collation', 'includes/calliope');
  $object = $form_state['object'];
  emicdora_calliope_delete_file($object->id);
  islandora_delete_object($object);
  drupal_set_message(t("Transcription has been deleted."));
}

/**
 * Sever delete critical edition and relationships to member objects.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function emicdora_delete_versions_submit(array $form, array &$form_state) {
  module_load_include('inc', 'emicdora', 'includes/utilities');
  $object = $form_state['object'];
  $version_pids = array();
  $source_pid = $object->id;
  $versions_query = <<<EOQ
     SELECT ?pid ?label FROM <#ri> WHERE {
      ?pid <fedora-rels-ext:isDerivationOf> <info:fedora/$source_pid> ;
      <fedora-model:label> ?label
}
EOQ;
  $versions = $object->repository->ri->sparqlQuery($versions_query);
  foreach ($versions as $version) {
    $version_pids[] = $version['pid']['value'];
  }
  if (!empty($version_pids)) {
    $batch = array(
      'title' => t("Deleting associated versions and their related objects"),
      'progress_message' => t('Completed @current operations out of @total.'),
      'operations' => array(),
    );
    foreach ($version_pids as $version_pid) {
      $batch['operations'][] = array(
        'emicdora_version_delete',
        array($version_pid),
      );
    }
    batch_set($batch);
  }
}

/**
 * Batch function to delete versions and their dependencies.
 *
 * @param string $version_pid
 *   PID of version to be deleted.
 */
function emicdora_version_delete($version_pid) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  module_load_include('inc', 'emicdora', 'includes/utilities');
  module_load_include('inc', 'collation', 'includes/calliope');
  $version_object = islandora_object_load($version_pid);
  $pages = islandora_paged_content_get_pages($version_object);
  $transcription_data = emicdora_get_raw_objects($version_object, 'transcriptions');
  $pids_to_delete = array();
  foreach ($pages as $page) {
    $pids_to_delete[] = $page['pid'];
  }
  foreach ($transcription_data as $transcription_datum) {
    $pids_to_delete[] = $transcription_datum['pid'];
    emicdora_calliope_delete_file($transcription_datum['pid']);
  }
  if (!empty($pids_to_delete)) {
    $batch = array(
      'title' => t("Deleting version's child objects"),
      'progress_message' => t('Completed @current operations out of @total.'),
      'operations' => array(),
    );
    foreach ($pids_to_delete as $pid_to_delete) {
      $deletion_object_object = islandora_object_load($pid_to_delete);
      $batch['operations'][] = array(
        'emicdora_remove_objects',
        array($deletion_object_object),
      );
    }
    $batch['operations'][] = array(
      'emicdora_remove_objects',
      array($tei_rdf),
    );
    batch_set($batch);
  }
  else {
    islandora_delete_object($version_object);
  }
}

/**
 * Deletes object.
 *
 * @param AbstractObject $object
 *   Object to be deleted.
 */
function emicdora_remove_objects($object) {
  if ($object) {
    islandora_delete_object($object);
  }
}
